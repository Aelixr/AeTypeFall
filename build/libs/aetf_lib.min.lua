HOOKABLE_EVENTS={RENDER="render",END_ENTITY_DRIVING="EndEntityDriving",ENTITY_REMOVED="EntityRemoved",KEY_PRESS="KeyPress",KEY_RELEASE="KeyRelease",INPUT_CHANGED="input"}INPUT_KEYCODES={RUN=4096,LEFT=128,WALK=262144,FORWARD=8,DUCK=4,SCORE=65536,JUMP=2,USE=32,BACK=16,WEAPON1=1048576,MOVERIGHT=1024,RELOAD=8192,ALT2=32768,CANCEL=64,ATTACK2=2048,ALT1=16384,RIGHT=256,MOVELEFT=512,WEAPON2=2097152,ZOOM=524288,ATTACK=1,GRENADE1=8388608,SPEED=131072,GRENADE2=16777216,BULLRUSH=4194304}function TS_instanceOf(a,b)if type(a)~="table"then return false end;b=tostring(b)local c=getmetatable(a)while true do if c==nil then return false end;if tostring(c)==b then return true end;c=getmetatable(c)end end;function TS_ITE(d,e,f)if d then return e()else return f()end end;function TS_forEach(g,h)for i,j in ipairs(g)do h(j,i-1,g)end end;function TS_map(g,h)local l={}for m,j in ipairs(g)do table.insert(l,h(j))end;return l end;function TS_filter(g,h)local l={}for m,j in ipairs(g)do if h(j)then table.insert(l,j)end end;return l end;function TS_slice(g,n,o)o=o or#g;if n<0 then n=#g+n end;if o<0 then o=#g+o end;local l={}for i=n+1,o do table.insert(l,g[i])end;return l end;function TS_splice(g,n,p,...)if not p or p>#g-n then p=#g-n end;n=n+1;local q={...}local l={}local r=p;local s=#q;for i=n+p-1,n,-1 do l[r]=g[i]r=r-1;if q[k]then g[i]=q[k]s=s-1 else table.remove(g,i)end end;while q[s]do table.insert(g,n,q[s])s=s-1 end;return l end;function TS_some(g,h)return#TS_filter(g,h)>0 end;function TS_every(g,h)return#g==#TS_filter(g,h)end;function TS_indexOf(g,t)for i=1,#g do if t==g[i]then return i-1 end end;return-1 end;function TS_split(u,v)local l={}if v==""then string.gsub(u,".",function(w)table.insert(l,w)end)return l end;if not string.find(u,v)then return{u}end;local x=u..v;local y="(.-)"..v;local z=1;local A,B,C=string.find(x,y,1)while A do table.insert(l,C)z=B+1;A,B,C=string.find(x,y,z)end;if z<=#u then C=string.sub(x,z)table.insert(l,C)end;return l end;function TS_push(g,...)for m,j in pairs({...})do g[#g+1]=j end end;Set=Set or{}Set.__index=Set;function Set.new(D,...)local E=setmetatable({},Set)Set.constructor(E,...)return E end;function Set.constructor(self,F)self._items={}if F then for G,m in pairs(F)do self._items[G]=true end end end;function Set.add(self,H)self._items[H]=true end;function Set.contains(self,H)return self._items[H]~=nil end;function Set.remove(self,H)local I=Set.contains(self,H)self._items[H]=nil;return I end;function Set.items(self)local l={}for H,m in pairs(self._items)do table.insert(l,H)end;return l end;function Set.count(self)local J=0;for H,m in pairs(self._items)do J=J+1 end;return J end;Map=Map or{}Map.__index=Map;function Map.new(D,...)local E=setmetatable({},Map)Map.constructor(E,...)return E end;function Map.constructor(self,F)self._items={}if F then for k,j in pairs(F)do self._items[k]=j end end end;function Map.put(self,K,L)self._items[K]=L end;function Map.containsKey(self,K)return self._items[K]~=nil end;function Map.remove(self,K)local I=self.containsKey(self,K)self._items[K]=nil;return I end;function Map.get(self,K)return self._items[K]end;function Map.keys(self)local l={}for k,j in pairs(self._items)do table.insert(l,k)end;return l end;function Map.values(self)local l={}for k,j in pairs(self._items)do table.insert(l,j)end;return l end;function Map.items(self)local l={}for k,j in pairs(self._items)do table.insert(l,{key=k,value=j})end;return l end;function Map.count(self)local J=0;for k,j in pairs(self._items)do J=J+1 end;return J end