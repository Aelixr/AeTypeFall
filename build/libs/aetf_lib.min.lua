function TS_ITE(a,b,c)if a then return b()else return c()end end;function TS_forEach(d,e)for f,g in ipairs(d)do e(g,f-1,d)end end;function TS_map(d,e)local h={}for i,g in ipairs(d)do table.insert(h,e(g))end;return h end;function TS_filter(d,e)local h={}for i,g in ipairs(d)do if e(g)then table.insert(h,g)end end;return h end;function TS_slice(d,j,l)l=l or#d;if j<0 then j=#d+j end;if l<0 then l=#d+l end;local h={}for f=j+1,l do table.insert(h,d[f])end;return h end;function TS_splice(d,j,m,...)if not m or m>#d-j then m=#d-j end;j=j+1;local n={...}local h={}local o=m;local p=#n;for f=j+m-1,j,-1 do h[o]=d[f]o=o-1;if n[k]then d[f]=n[k]p=p-1 else table.remove(d,f)end end;while n[p]do table.insert(d,j,n[p])p=p-1 end;return h end;function TS_some(d,e)return#TS_filter(d,e)>0 end;function TS_every(d,e)return#d==#TS_filter(d,e)end;function TS_indexOf(d,q)for f=1,#d do if q==d[f]then return f-1 end end;return-1 end;function TS_split(r,s)local h={}if s==""then string.gsub(r,".",function(t)table.insert(h,t)end)return h end;if not string.find(r,s)then return{r}end;local u=r..s;local v="(.-)"..s;local w=1;local x,y,z=string.find(u,v,1)while x do table.insert(h,z)w=y+1;x,y,z=string.find(u,v,w)end;if w<=#r then z=string.sub(u,w)table.insert(h,z)end;return h end;function TS_push(d,...)for i,g in pairs({...})do d[#d+1]=g end end;Set=Set or{}Set.__index=Set;function Set.new(A,...)local B=setmetatable({},Set)Set.constructor(B,...)return B end;function Set.constructor(self,C)self._items={}if C then for D,i in pairs(C)do self._items[D]=true end end end;function Set.add(self,E)self._items[E]=true end;function Set.contains(self,E)return self._items[E]~=nil end;function Set.remove(self,E)local F=Set.contains(self,E)self._items[E]=nil;return F end;function Set.items(self)local h={}for E,i in pairs(self._items)do table.insert(h,E)end;return h end;function Set.count(self)local G=0;for E,i in pairs(self._items)do G=G+1 end;return G end;Map=Map or{}Map.__index=Map;function Map.new(A,...)local B=setmetatable({},Map)Map.constructor(B,...)return B end;function Map.constructor(self,C)self._items={}if C then for k,g in pairs(C)do self._items[k]=g end end end;function Map.put(self,H,I)self._items[H]=I end;function Map.containsKey(self,H)return self._items[H]~=nil end;function Map.remove(self,H)local F=self.containsKey(self,H)self._items[H]=nil;return F end;function Map.get(self,H)return self._items[H]end;function Map.keys(self)local h={}for k,g in pairs(self._items)do table.insert(h,k)end;return h end;function Map.values(self)local h={}for k,g in pairs(self._items)do table.insert(h,g)end;return h end;function Map.items(self)local h={}for k,g in pairs(self._items)do table.insert(h,{key=k,value=g})end;return h end;function Map.count(self)local G=0;for k,g in pairs(self._items)do G=G+1 end;return G end